
int testindex;

int clear() {
    testindex = 0;
}

int assert(int expected, int actual) {
    testindex = testindex + 1;
    if (expected != actual) {
        printf("#%d: %d expected, but got %d\n", testindex, expected, actual);
        println(" ");
        exit(1);
    }
    return 0;
}

int assert_char(char expected, char actual) {
    testindex = testindex + 1;
    if (expected != actual) {
        printf("#%d: %d expected, but got %d\n", testindex, expected, actual);
        println(" ");
        exit(1);
    }
    return 0;
}


int main() {
    clear(); println("# 演算子");
    assert(0, test01_01());
    assert(0, test01_02());
    assert(42, test01_03());
    assert(21, test01_04());
    assert(41, test01_05());

    assert(47, test01_06());
    assert(15, test01_07());
    assert(4, test01_08());
    assert(10, test01_09());
    assert(10, test01_10());
    
    assert(0, test01_11());
    assert(1, test01_12());
    assert(0, test01_13());
    assert(1, test01_14());

    assert(0, test01_15());
    assert(1, test01_16());
    assert(0, test01_17());
    assert(1, test01_18());

    assert(0, test01_19());
    assert(1, test01_20());
    assert(1, test01_21());
    assert(0, test01_22());
    assert(1, test01_23());
    assert(1, test01_24());
    assert(1, test01_25());
    assert(1, test01_26());


    clear(); println("# 複文");
    assert(2, test02_01());
    assert(3, test02_02());

    clear(); println("# 変数");
    assert(3, test02_03());
    assert(3, test02_04());
    assert(3, test02_05());
    assert(0, test02_06());

    clear(); println("# 変数 2");
    assert(3, test02_07());
    assert(3, test02_08());
    assert(3, test02_09());
    assert(0, test02_10());
    assert(3, test02_11());

    clear(); println("# return");
    assert(4, test02_12());
    assert(3, test02_13());
    assert(3, test02_14());
    assert(0, test02_15());
    assert(3, test02_16());
    assert(2, test02_17());

    clear(); println("# if");
    assert(2, test02_18());
    assert(3, test02_19());
    assert(2, test02_20());
    assert(2, test02_21());
    assert(3, test02_22());
    assert(3, test02_23());

    clear(); println("# if else");
    assert(2, test02_24());
    assert(3, test02_25());
    assert(2, test02_26());
    assert(2, test02_27());
    assert(3, test02_28());
    assert(4, test02_29());

    clear(); println("# while");
    assert(10, test02_30());
    assert(9, test02_31());
    assert(1, test02_32());

    clear(); println("# for");
    assert(45, test02_33());
    assert(10, test02_34());

    clear(); println("# {}");
    assert(3, test02_35());
    assert(2, test02_36());
    assert(4, test02_37());
    assert(3, test02_38());
    assert(55, test02_39());

    clear(); println("# pointer & *");
    assert(1, test_pointer_01());
    assert(3, test_pointer_02());
    assert(4, test_pointer_03());
    assert(3, test_pointer_04());
    assert(0, test_pointer_05());
    assert(1, test_pointer_06());
    assert(3, test_pointer_07());
    assert(7, test_pointer_08());
    assert(2, test_pointer_09());

    clear(); println("# pointer arithmetic");
    assert(5, test_pointer_arithmetic_01());
    assert(3, test_pointer_arithmetic_02());
    assert(7, test_pointer_arithmetic_03());
    assert(7, test_pointer_arithmetic_04());
    assert(2, test_pointer_arithmetic_05());

    clear(); println("# sizeof");
    assert(8, test_sizeof_01());
    assert(8, test_sizeof_02());
    assert(8, test_sizeof_03());
    assert(8, test_sizeof_04());
    assert(8, test_sizeof_05());

    clear(); println("# array");
    assert(4, test_array_01());
    assert(3, test_array_02());
    assert(3, test_array_03());
    assert(3, test_array_04());
    assert(4, test_array_05());
    assert(5, test_array_06());


    clear(); println("# array indexer");
    assert(1, test_arrayi_01());
    assert(1, test_arrayi_02());
    assert(1, test_arrayi_03());
    assert(1, test_arrayi_04());
    assert(1, test_arrayi_05());
    assert(45, test_arrayi_06());

    clear(); println("# array sizeof");
    assert(40, test_arraysizeof_01());




    clear(); println("# char");
    assert(1, test_char_02());
    assert(1, test_char_04());
    assert(1, test_char_05());
    assert(2, test_char_06());
    assert(1, test_char_07());
    assert(10, test_char_08());
    assert(1, test_char_09());
    assert(2, test_char_10());

    clear(); println("# string literal");
    assert(1, test_string_literal_01());
    assert_char(97, test_string_literal_02());
    assert_char(97, test_string_literal_03());
    assert_char(98, test_string_literal_04());
    assert_char(99, test_string_literal_05());
    assert_char(0, test_string_literal_06());
    assert(4, test_string_literal_07());

    return 0;
}


int test01_01() { return 0; }
int test01_02() {return 0;}
int test01_03() {return 42;}
int test01_04() {return 5+20-4;}
int test01_05() {return  12 + 34 - 5 ;}

int test01_06() {return 5+6*7;}
int test01_07() {return 5*(9-6);}
int test01_08() {return (3+5)/2;}

int test01_09() {return -10+20;}
int test01_10() {return -(5+5)+20;}

int test01_11() {return 1==2;}
int test01_12() {return 2==2;}
int test01_13() {return 2!=2;}
int test01_14() {return 1!=2;}

int test01_15() {return 2<2;}
int test01_16() {return 1<2;}
int test01_17() {return 2>2;}
int test01_18() {return 3>2;}

int test01_19() {return 3<=2;}
int test01_20() {return 2<=2;}
int test01_21() {return 1<=2;}
int test01_22() {return 1>=2;}
int test01_23() {return 2>=2;}
int test01_24() {return 3>=2;}

int test01_25() {return 1*2 == 4/2;}
int test01_26() {return 1*2 == (2+2)/(1+1);}


// 複文
int test02_01() {0;1; return 2;}
int test02_02() {10+20;11*11; return 1+2;}


// 変数
int test02_03() {int a;return a=1+2;}
int test02_04() {int a;return a=1+2*3-8/2;}
int test02_05() {int a;int b;a=1;b=2;return a+b;}
int test02_06() {int a;int b;int c;a=1;b=2;return c=4/b-a*2;}


// 変数 2
int test02_07() {int abc;return abc=1+2;}
int test02_08() {int abc;return abc=1+2*3-8/2;}

int test02_09() {int abc;int bzz;abc=1;bzz=2;return abc+bzz;}
int test02_10() {int abc;int bzz;int ab;abc=1;bzz=2;return ab=4/bzz-abc*2;}

int test02_11() {int _a12;int __b__3;_a12=1;__b__3=2;return _a12+__b__3;}


// return
int test02_12() {int abc;abc=1+2;return 4;}
int test02_13() {int abc;abc=1+2*3-8/2;return abc;}

int test02_14() {int abc;int bzz;abc=1;bzz=2;return abc+bzz;}
int test02_15() {int abc;int bzz;int ab;abc=1;bzz=2;return ab=4/bzz-abc*2;}

int test02_16() {int _a12;int __b__3;_a12=1;__b__3=2;return _a12+__b__3;}
int test02_17() {int returnx;returnx=2; return returnx;}


// if
int test02_18() {if(1)return 2;return 3;}
int test02_19() {if(0)return 2;return 3;}
int test02_20() {int a;a=0;if(a+1)return 2;return 3;}

int test02_21() {if(1)if(1)return 2;return 3;}
int test02_22() {if(1)if(0)return 2;return 3;}
int test02_23() {if(0)if(1)return 2;return 3;}


// if else
int test02_24() {if(1)return 2;else return 3;}
int test02_25() {if(0)return 2;else return 3;}
int test02_26() {int a;a=0;if(a+1)return 2;else return 3;}

int test02_27() {if(1)if(1)return 2;else return 3;}
int test02_28() {if(1)if(0)return 2;else return 3;}
int test02_29() {if(0)if(1)return 2;else return 3;else return 4;}


// while
int test02_30() {int a;a=1;while(a<10)a=a+1;return a;}
int test02_31() {int a;a=1;while(a+1<10)a=a+1;return a;}
int test02_32() {int a;a=1;while(a<0)a=a+1;return a;}

// for
int test02_33() {int a;int b;b=0;for(a=1;a<10;a=a+1)b=b+a;return b;}
int test02_34() {int a;a=0;for(;a<10;)a=a+1;return a;}

// {}
int test02_35() {{1;{2;return 3;}}}
int test02_36() {if (1) {1;return 2;}}
int test02_37() {if (0) {1;2;} else {3; return 4;}}

int test02_38() {{1; {2;} return 3;}}
int test02_39() {int i;int j;i=0; j=0; while(i<=10) {j=i+j; i=i+1;} return j;}


// ### & , *
int test_pointer_01() { int a;int b;a = 1; b = &a; return *b; }
int test_pointer_02() { int a;int b;int c;a = 3; b = 5; c = &b - 1; return *c; }
int test_pointer_03() { int a;int b;a = 3; b = 1 + *(&a); return b; }
int test_pointer_04() {int a;a=3;return *&a;}
int test_pointer_05() {int *a;int **b;int ***c; return 0;}
int test_pointer_06() {int a;int *b;a = 1;b = &a;return *b;}
int test_pointer_07() {int a;int *b;b = &a; *b = 3;return a;}
int test_pointer_08() {int a;int b;a=3;b=5;*(&a+1)=7;return b;}
int test_pointer_09() {int a;int b;int *c;c=&a;*(c+1)=2;return b;}

// # スタックに確保した変数のアドレスが、確保した順に昇順になるようにする
//dryrun 1 'int main() {int a;int b;printInt(&a);printInt(&b);return 1;}'
//try 1 'int main() {int a;int b; return &a < &b;}'


// ### pointer arithmetic 
int test_pointer_arithmetic_01() { int x=3; int y=5; return *(&x+1); }
int test_pointer_arithmetic_02() { int x=3; int y=5; return *(&y-1); }
int test_pointer_arithmetic_03() { int x=3; int y=5; *(&x+1)=7; return y; }
int test_pointer_arithmetic_04() { int x=3; int y=5; *(&y-1)=7; return x; }
int test_pointer_arithmetic_05() { int x; return (&x+2)-&x; }


// ### sizeof
//# 現状、パディングありのため int は 8 バイト扱い
//#try 4 'int main() { int a; return sizeof(a); }'
int test_sizeof_01() { int a; return sizeof(a); }
int test_sizeof_02() { int *a; return sizeof(a); }
//#try 4 'int main() { return sizeof(1); }'
int test_sizeof_03() { return sizeof(1); }
//#try 4 'int main() { return sizeof(sizeof(1)); }'
int test_sizeof_04() { return sizeof(sizeof(1)); }
int test_sizeof_05() { int a;return sizeof(&a+1); }


// ### array
int test_array_01() {int a[2];*a=1;*(a+1)=3;return *a+*(a+1);}
int test_array_02() {int a[2];*a=1;*(a+1)=2;int *p;return *a+*(a+1);}
int test_array_03() {int x[2];int *y=&x; *y=3; return *x; }
int test_array_04() {int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *x; }
int test_array_05() {int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *(x+1); }
int test_array_06() {int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *(x+2); }


// ### array indexer
int test_arrayi_01() {int a[2];int i;a[0]=1;return a[0];}
int test_arrayi_02() {int a[2];int i;a[1]=1;return a[1];}
int test_arrayi_03() {int a[2];int i;a[0+1]=1;return a[1];}
int test_arrayi_04() {int a[2];int i=1;a[i]=1;return a[1];}
int test_arrayi_05() {int a[2];int i1=0;int i2=1;a[i1+i2]=1;return a[1];}
int test_arrayi_06() {int a[10];int i=0;int sum=0;for(i=0;i<10;i=i+1) {a[i]=i;sum=sum+a[i];} return sum;}


// ### array sizeof
//# 現状、パディングありのため int は 8 バイト扱い
int test_arraysizeof_01() {int a[5];return sizeof(a);}




// ### char
//try 1 'char a;int b;int main() {a=1;b=2;return a;}'
int test_char_02() {char a;int b;a=1;b=2;return a;}

int test_char_04() { char x=1; return x; }
int test_char_05() { char x=1; char y=2; return x; }
int test_char_06() { char x=1; char y=2; return y; }

int test_char_07() { char x; return sizeof(x); }
int test_char_08() { char x[10]; return sizeof(x); }
int test_char_09() { return sub_char(7, 3, 3); } int sub_char(char a, char b, char c) { return a-b-c; }
int test_char_10() { char a; char b; char c; a=1; b=2; c=3; return *(&a+1); }


// ### string literal
int test_string_literal_01() { char *c = "abcde"; return 1; }
int test_string_literal_02() { char *c = "abcde"; return c[0]; }
int test_string_literal_03() { return "abc"[0]; }
int test_string_literal_04() { return "abc"[1]; }
int test_string_literal_05() { return "abc"[2]; }
int test_string_literal_06() { return "abc"[3]; }
int test_string_literal_07() { return sizeof("abc"); }



/*


#
echo "### function call"
try 3 'int main() {return ret3();}'
try 5 'int main() {return ret5();}'
try 10 'int main() {return add(3, 7);}'
try 11 'int main() {return add(add(1,3), 7);}'
try 12 'int main() {int a;a=1;return add(add(a,4), 7);}'
try 2 'int main() {return sub(3, 1);}'

#
echo "### function"
try 3 'int main() { int a;a=1; return a + f();} int f() { int a;a=2; return a;}'
try 2 'int main() { return f(1);} int f(int a) { return a + 1; }'
try 3 'int main() { return f(3, 1);} int f(int a, int b) { return a; }'
try 1 'int main() { return f(3, 1);} int f(int a, int b) { return b; }'
try 7 'int main() { return add2(3, 4);} int add2(int a, int b) { return a+b; }'
try 1 'int main() { return sub2(4, 3);} int sub2(int a, int b) { return a-b; }'
try 55 'int main() { return fib(9);} int fib(int x) { if (x<=1) return 1; return fib(x-1) + fib(x-2); }'


#
echo '### global variable'
try 0 'int x; int main() { return x; }'
try 3 'int x; int main() { x=3; return x; }'
try 0 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[0]; }'
try 1 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[1]; }'
try 2 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[2]; }'
try 3 'int x[4]; int main() { x[0]=0; x[1]=1; x[2]=2; x[3]=3; return x[3]; }'

try 8 'int x; int main() { return sizeof(x); }'
try 32 'int x[4]; int main() { return sizeof(x); }'

try 6 'int a;int main() {int b = 2;a = 3;return a * b;}'
try 6 'int a;int b;int main() {b = 2;a = 3;return a * b;}'
try 12 'int a;int main() {a=12;f2();return a;} int f2(){int a=2;return 1;}'




echo OK
*/

